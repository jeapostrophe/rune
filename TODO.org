* New Idea
** caching in uzbl
   Do I need polipo?
** look at LightTable for CSS tricks
** look at wmctrl for interacting with WM
** look at awesome for more configurable/different WM
** look through ergoemacs for features
   http://ergoemacs.org/emacs/emacs.html
** look at good unicode fonts and substitution
   http://ergoemacs.org/emacs/emacs_unicode_fonts.html
** look at how sam does interacting with external stuff
   http://doc.cat-v.org/bell_labs/sam_lang_tutorial/sam_tut.pdf
* Rune

Test Î»

Rune is an "operating system" and user interface. It performs the
jobs of:
- emacs
- screen
- xterm
- zsh
- conkeror
- irsii
- google-chrome
- xmonad
- xmobar
- dmenu
- miro
- workrave
- gmail
- google calendar
- newsblur
- twitter reader
- eog
- evince
- ps
- pkill
- crond

It is generalized over a user interface, so I can easily port it from
the console, framebuffer, X11, Wayland, etc. It is designed to have a
totally functional core so its state can be easily saved and reloaded
to exactly the same environment.

It has the concepts of a process, a Web view, a canvas, a buffer, a
frame, a window, and a file.

A lot of what it does is based on the concept of overlays... where a
specific chunk of space (characters or pixels) has added information
about it.

This information might affect rendering (color) or the behavior of
other commands (so that F1 could look at the 'help overlays of where
it is).

Modes would specify parsers and lexers that add overlay information to
the content they are reading (or to other content.) For instance, the
spell-check mode would add a 'spelled-wrong overlay given that
another mode had added the 'plain-text overlay. For instance, the
compile mode might look for messages of the form "file:line: message"
and add overlay to that file. For efficiency, we make the programmer
specify things about parser/lexer behavior, such that the entire file
doesn't need to be re-lexed.

Special Rune programs can produce pre-overlayed text.

Commands could search their body for overlays of a specific type
(such as "how many words are spelled wrong?")

* Layout Tree
  A view is a cursor plus a buffer---it represents an active buffer.

  A layout is n-ary tree where branches have "styles" and the leaves
  are views. Styles are stuff like: 
  - horizontal: Children are distributed equally horizontally
  - vertical: Children are distributed equally vertically
  - tall: One child is horizontal and the other children are
    vertical
  - mirror tall: One child is vertical and the other children are
    horizontal
  - full: One child has the whole space and the other children are
    hidden
  - header: There are exactly two children, one is on top and never
    receives focus
  - footer: There are exactly two children, one is on bottom and never
    receives focus
 
 [My Xmonad setup is (header "xmobar" (full (tall ...) (tall ...)
 ...)), whereas a normal emacs window is (footer (footer (view)
 mode-line) mini-buffer)]

 A focus is a zipper of a layout.

* Tasks
** DONE implement gap buffer
   CLOSED: [2013-06-07 Fri 16:17]
** TODO unicode char input
** TODO open by collection path vs file
** TODO font rendering
   http://www.reddit.com/r/gamedev/comments/1q6j70/sane_way_of_rendering_accurate_text_in_gles2/
** TODO small keyboard shortcut set
** TODO contour view
** TODO generalize three implementations of zipper
   two in zip-buffer and one in ctxt:layer
** DONE rendering
   CLOSED: [2013-06-22 Sat 13:38]
   redisplay quickly? (blank out modified rows and update)
   OR display quickly (shader magic?)

   Will the shader magic pay-off?
   If not, I can still do fast redisplay by not clearing.
** DONE define gui interface
   CLOSED: [2013-06-12 Wed 16:07]
** TODO use markers instead of cursors
   (because otherwise edits move around other people's cursors weird)
** TODO Think about emacs design
   http://en.wikipedia.org/wiki/Emacs
** TODO Think about Yi design
   http://yi-editor.blogspot.com/

   http://yi-editor.blogspot.com/2009/03/lazy-and-incremental-parsing-paper.html

   http://yi-editor.blogspot.com/2008/11/incremental-parsing-in-yi.html
** TODO think about emacsy
   http://shanecelis.github.io/emacsy/2013/06/05/google-summer-of-code-2013-emacsy/
** TODO add bold and italic text?
** TODO uzbl and its structure of -core + event handler + scripts
   but use zeromq?
** TODO plan structure
   like a microkernel...
   - state manager
   - rendering manager (rendering individual windows/frames)
   - gui manager (creating X/etc windows)

   Each "mode" would get its own process and send/receive messages
   about changes, overlays, etc

   Each "window" would get its own process and send/receive messages
   about cursor movement, key inputs, etc that may send it in turn
   to...

   Each "buffer" would get its own process to facilitate safe file
   modification
** TODO look at final term
   http://finalterm.org/
** TODO look at rings
   https://github.com/konr/rings
** TODO look at dbus and 9p
   The Plan 9 system is very interesting in its UNIX-ness. I like the
   idea of having each tool do a very specific and simple task. 

   For instance, the idea of in rune having each thing be either a
   file or a process is neat and could work...
   - the runefs would have files representing each of the buffers,
     and all of these would be backed on the filesystem, but only
     some of them would also be associated with named thing on the
     fs. When you turn on rune, you get its files and you could
     explicitly sync them to the OS with a save operation.

     file-load/os : path -> file-handle
     file-save/os! : file-handle path -> void

     file-rows : fh -> rows
     file-row : fh row -> string
     file-row-cols : fh row -> cols
     file-row-col : fh row col -> string

   - files that are opened by someone would have a zipper associated
     with them for random row/col modification, with the interface:

     file-insert-at! : fh row col char -> void
     file-delete-at! : fh row col -> void

   - each file would have an overlay database of rectangles with the
     interface

     rect = row X col X width X height

     file-overlay-ref : fh rect key -> val
     file-overlay-set! : fh rect key val -> void

   - processes could subscribe to events such as

     (on-file-change overlay-key overlay-value-pattern)


  concerns...
  - is row/col the best interface for the kind of text I deal with?
    racket source and org-mode are structured.
  - what if a file had an associated "structurer" where a structure's
    job is to produce a tree. A plain-text structure produces a list
    of lines, a programming language might produce a list of tokens
    or an ast-like thing

    --

    How can you unify a text editor, a Web view, and the window manager?
    - The view is ultimately a bitmap -> eyes function.
    - If each thing can produce a bitmap, then they can be composed
      with a final call to the view.
    - More complicated: the view may push back down its width X height
    
    How can you unify window manager key events, application key
    events, minibuffer commands, and shell commands?
    - A single key evaluator loop can capture commands and dispatch
      them to the right place. This can be a nested process where some
      receivers accumulate results before dispatching themselves.

    How can you unify file buffers, Web sites, temporary content on
    the output of commands?
    - A virtual filesystem of byte content

    How can you unify the interface of, but separate the
    implementation of, a spell checker, a syntax highlighter, a
    compile error hightlighter?
    - Overlay "observers" as described above?

    How can you unify the implementation of a normal text editor, a
    Web browser, and a "live" text interface like org-mode, miro, mail
    reader, irc client, etc?
    - Emacs has complicated key handlers that look at their context
      and do stuff
    - You could attach overlay information that did the same thing as
      emacs

    A very different approach...
    - Make a gui system where you can create text windows (and it
      lays them out) and then listen for events, which could be keys
      or could be other events
    - The gui system would be in charge of laying out these windows
      (really it would just make one os window) and then listening for
      the input. 
    - some commands it would capture (like moving focus around) and
      others it would deliver to the application. commands like M-x
      might pop up a new view with handle for the original
      view/program (to sent it a message) commands like C-` would also
      get that handle, but would take it over and display on it.
    - in this world, a buffer is like a view to a program which
      interprets events its own way. each time you open a file, a new
      program would run (normally in the background) and stay running
      handling input to that file.
    - such programs would communicate with the os to arrange to only
      open them uniquely once and have them save their state so they
      could be restarted later
    - a single terminal session would be a program like this too

** TODO paredit?
** TODO what to do first?
   basic editor -> buffers/windows/frames -> multiple modes ->
   terminal -> shell -> org-mode -> canvas buffers (eog, evince) ->
   web buffers
** TODO rss reader
   https://github.com/sloonz/maildir-feed
** TODO notmuch email
   https://wiki.archlinux.org/index.php/OfflineIMAP#Gmail_configuration
   https://wiki.archlinux.org/index.php/Msmtp
   https://wiki.archlinux.org/index.php/Isync
   http://notmuchmail.org/
   http://jason.the-graham.com/2011/01/10/email_with_mutt_offlineimap_imapfilter_msmtp_archivemail/
   https://github.com/OfflineIMAP/offlineimap/pull/43
** DONE internal: change key map to arrows
   CLOSED: [2013-06-14 Fri 12:59]
** DONE view display adjusting to cursor
   CLOSED: [2013-06-14 Fri 12:59]
** TODO detach cursor from view and put on buffer somehow
   so that if a buffer doesn't have any cursor when you create a new
   view of it, you get the last cursor
** TODO layout: full
** TODO layout: tall
** TODO layout: mirror tall
** TODO layout: show top bar
** TODO layout: show mode line
** TODO meta: implement minibuffer
** TODO command: duplicate view
** TODO command: view buffer list
** TODO command: switch buffer of view (by name? by buffer list?)
** TODO command: have focus operations wrap around
** TODO command: change "main" window for tall/mirror tall (vs focused)
** TODO command: close view
** TODO command: change layout
** TODO command: jump to different layout (Cmd-<numeral>)
** TODO command: edit files
** TODO command: save files
** TODO meta: detect file changed on disk
** TODO text windows of different flavors
   random access - text file
   append only - terminal session
   read-only - less/more
** TODO terminal
   Make every command invocation create a new set of buffers that is
   "spliced" into the terminal buffer, so that you get a record the
   entire interaction that can be redisplayed in the future (like
   always "tee"ing)
** DONE opengl rendering
   CLOSED: [2013-06-22 Sat 13:38]
   how to get all the font characters? (exp/font.rkt)
   but maybe just scan the current file set and dynamically create
   the atlas?
** TODO compositing
   https://github.com/chjj/compton/blob/master/src/opengl.c
** TODO automatically increase font-size so that 80chars fit width-wise and no more
** TODO embed chromium or just use uzbl?
   CEF3 seems to do it

   big challenge might be doing off-screen rendering and then
   figuring out where an object is to overlay on it?

** TODO integrate with anthy for JP input
** TODO woman
** TODO explorer
   https://github.com/tonyg/racket-explorer
** TODO cow repl
   https://github.com/takikawa/racket-cow-repl
** TODO in shell, make ls sensitive to .gitignore
** TODO live programming
   especially with text, picts, images, and graphs
** TODO look at lamdu
   http://peaker.github.io/lamdu/
** TODO push notify on toolbar vs poll
** TODO hide stuff that isn't active
   like music playing, etc
** TODO focus button that prevents switching windows/workspaces/etc
** TODO fonts
   http://www.reddit.com/r/gamedev/comments/1rl412/favorite_free_8bitpixel_font/
   15-25 pixels
   monospace vs proportional?
   Alix FB - http://www.fontbureau.com/fonts/AlixFB/
   Nitti
   http://vim.wikia.com/wiki/The_perfect_programming_font
   http://www.itworld.com/slideshow/104321/13-fonts-make-programmer-smile-359589#slide11
